datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Purchase {
  id        String   @id @default(cuid())
  email     String   // email du client (on peut aussi le lier à l'utilisateur plus tard)
  template  String   // slug ou nom du template acheté
  variantId  Int?  
  createdAt DateTime @default(now())
}

// Modèle pour gérer les abonnements
model Subscription {
  id               String             @id @default(cuid())
  userEmail        String             @unique
  plan             PlanType           @default(FREE)
  status           SubscriptionStatus @default(ACTIVE)
  lemonSqueezyId   String?            // ID de l'abonnement Lemon Squeezy
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("subscriptions")
}

// Modèle pour tracker l'usage de l'AI
model AIUsage {
  id         String   @id @default(cuid())
  userEmail  String
  date       DateTime @db.Date
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userEmail, date])
  @@map("ai_usage")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Template {
  id             Int      @id @default(autoincrement())
  lemonId        Int
  slug           String   @unique
  name           String
  description    String
  demoUrl        String
  images         Json     // Tableau d'URLs d'images (hébergées sur Vercel Blob)
  openGraphImage String
  performanceImage String?
  category       String
  categories     String[]
  categoriesSlugs     String[]
  tech           Json
  pages          Json
  extras         Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Component {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  name           String
  description    String
  demoUrl        String
  image          String
  category       String
  code           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

